version: '3.8'

networks:
  okr_network:
    driver: bridge

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/okr_db
    networks:
      - okr_network
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:latest
    environment:
      # POSTGRES environment variables
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: okr_db
    ports:
      - "${DB_HOST_PORT:-5433}:5432"
    volumes:
      # Raw data file storage
      - postgres_data:/var/lib/postgresql/data

      # Hook to Postgres initialization process
      # Mount Prod or Staging initialization sql script
      # the file name can be arbitrary: ie init.sql, init_db.sql, db.sql, etc
      - "./db/init_${OKR_APP_DEPLOY_MODE:-staging}.sql:/docker-entrypoint-initdb.d/init_db.sql"


      # Mount SQL Script to initialize DB Schema (tables), imported in init_db.sql
      - "./db/schema.sql:/db/schema.sql"

      # Mount SQL Script to add toy data into tables, imported in init_db.sql, if empty DB and on Staging deployment
      - "./db/data.sql:/db/data.sql"
    networks:
      - okr_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - OKR_BACKEND_URL=http://backend:8000
    working_dir: /app
    volumes:
      - ./frontend/app.py:/app/app.py
      - ./frontend/key_results_card.py:/app/key_results_card.py
      - ./frontend/key_result_item.py:/app/key_result_item.py
      - ./frontend/key_result_item_edit.py:/app/key_result_item_edit.py
      - ./frontend/key_result_item_view.py:/app/key_result_item_view.py
      - ./frontend/key_result_to_add_to_objective.py:/app/key_result_to_add_to_objective.py
      - ./frontend/key_result_item_creation_ui.py:/app/key_result_item_creation_ui.py

    ports:
      - "8501:8501"
    depends_on:
      - backend
    networks:
      - okr_network

volumes:
  postgres_data:
